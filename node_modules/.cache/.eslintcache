[{"/Users/onesmusnyakotyo/ocart/frontend/src/index.js":"1","/Users/onesmusnyakotyo/ocart/frontend/src/reportWebVitals.js":"2","/Users/onesmusnyakotyo/ocart/frontend/src/App.js":"3","/Users/onesmusnyakotyo/ocart/frontend/src/store.js":"4","/Users/onesmusnyakotyo/ocart/frontend/src/reducers/productReducers.js":"5","/Users/onesmusnyakotyo/ocart/frontend/src/reducers/orderReducers.js":"6","/Users/onesmusnyakotyo/ocart/frontend/src/components/Footer.js":"7","/Users/onesmusnyakotyo/ocart/frontend/src/components/SearchButtons.js":"8","/Users/onesmusnyakotyo/ocart/frontend/src/components/FooterPrivacy.js":"9","/Users/onesmusnyakotyo/ocart/frontend/src/components/Header.js":"10","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CartScreen.js":"11","/Users/onesmusnyakotyo/ocart/frontend/src/screens/PaymentScreen.js":"12","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductScreen.js":"13","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProfileScreen.js":"14","/Users/onesmusnyakotyo/ocart/frontend/src/screens/HomeScreen.js":"15","/Users/onesmusnyakotyo/ocart/frontend/src/components/NotFound.js":"16","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingScreen.js":"17","/Users/onesmusnyakotyo/ocart/frontend/src/screens/LoginScreen.js":"18","/Users/onesmusnyakotyo/ocart/frontend/src/screens/RegisterScreen.js":"19","/Users/onesmusnyakotyo/ocart/frontend/src/screens/UserListScreen.js":"20","/Users/onesmusnyakotyo/ocart/frontend/src/screens/UserEditScreen.js":"21","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductEditScreen.js":"22","/Users/onesmusnyakotyo/ocart/frontend/src/screens/OrderListScreen.js":"23","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellRegisterScreen.js":"24","/Users/onesmusnyakotyo/ocart/frontend/src/screens/PlaceOrderScreen.js":"25","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerOrderListScreen.js":"26","/Users/onesmusnyakotyo/ocart/frontend/src/screens/OrderScreen.js":"27","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductListScreen.js":"28","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingLabels.js":"29","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellingHow.js":"30","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingReceiptDisplay.js":"31","/Users/onesmusnyakotyo/ocart/frontend/src/reducers/cartReducers.js":"32","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerConfirmationScreen.js":"33","/Users/onesmusnyakotyo/ocart/frontend/src/components/FooterTerms.js":"34","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/StripeCheckout.js":"35","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/Cancelled.js":"36","/Users/onesmusnyakotyo/ocart/frontend/src/reducers/userReducers.js":"37","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/Success.js":"38","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerRegisterSuccess.js":"39","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerProductListScreen.js":"40","/Users/onesmusnyakotyo/ocart/frontend/src/constants/productConstants.js":"41","/Users/onesmusnyakotyo/ocart/frontend/src/components/Logo.js":"42","/Users/onesmusnyakotyo/ocart/frontend/src/constants/orderConstants.js":"43","/Users/onesmusnyakotyo/ocart/frontend/src/components/Message.js":"44","/Users/onesmusnyakotyo/ocart/frontend/src/components/FormContainer.js":"45","/Users/onesmusnyakotyo/ocart/frontend/src/components/Loader.js":"46","/Users/onesmusnyakotyo/ocart/frontend/src/components/CheckoutSteps.js":"47","/Users/onesmusnyakotyo/ocart/frontend/src/constants/userConstants.js":"48","/Users/onesmusnyakotyo/ocart/frontend/src/components/SearchBox.js":"49","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/StripeHelper.js":"50","/Users/onesmusnyakotyo/ocart/frontend/src/constants/cartConstants.js":"51","/Users/onesmusnyakotyo/ocart/frontend/src/components/Meta.js":"52","/Users/onesmusnyakotyo/ocart/frontend/src/components/Rating.js":"53","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingLabelsPages.js":"54","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingReceipt.js":"55","/Users/onesmusnyakotyo/ocart/frontend/src/components/Paginate.js":"56","/Users/onesmusnyakotyo/ocart/frontend/src/actions/cartActions.js":"57","/Users/onesmusnyakotyo/ocart/frontend/src/actions/orderActions.js":"58","/Users/onesmusnyakotyo/ocart/frontend/src/actions/productActions.js":"59","/Users/onesmusnyakotyo/ocart/frontend/src/actions/userActions.js":"60","/Users/onesmusnyakotyo/ocart/frontend/src/components/ProductCarousel.js":"61","/Users/onesmusnyakotyo/ocart/frontend/src/components/Product.js":"62","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductInsertExcelScreen.js":"63"},{"size":871,"mtime":1624289921970,"results":"64","hashOfConfig":"65"},{"size":362,"mtime":1620843877065,"results":"66","hashOfConfig":"65"},{"size":5116,"mtime":1642958855625,"results":"67","hashOfConfig":"65"},{"size":2721,"mtime":1623437389719,"results":"68","hashOfConfig":"65"},{"size":4455,"mtime":1621517971533,"results":"69","hashOfConfig":"65"},{"size":4440,"mtime":1623439150746,"results":"70","hashOfConfig":"65"},{"size":881,"mtime":1622747451613,"results":"71","hashOfConfig":"65"},{"size":2101,"mtime":1641558284578,"results":"72","hashOfConfig":"65"},{"size":157,"mtime":1622747314642,"results":"73","hashOfConfig":"65"},{"size":7077,"mtime":1641497174394,"results":"74","hashOfConfig":"65"},{"size":3946,"mtime":1624040675950,"results":"75","hashOfConfig":"65"},{"size":2397,"mtime":1622053947911,"results":"76","hashOfConfig":"65"},{"size":9958,"mtime":1643038967380,"results":"77","hashOfConfig":"65"},{"size":5843,"mtime":1623606205788,"results":"78","hashOfConfig":"65"},{"size":1797,"mtime":1624113127249,"results":"79","hashOfConfig":"65"},{"size":186,"mtime":1622796766772,"results":"80","hashOfConfig":"65"},{"size":2708,"mtime":1622053105710,"results":"81","hashOfConfig":"65"},{"size":2563,"mtime":1622400919423,"results":"82","hashOfConfig":"65"},{"size":3511,"mtime":1622399528586,"results":"83","hashOfConfig":"65"},{"size":4592,"mtime":1621278821094,"results":"84","hashOfConfig":"65"},{"size":3145,"mtime":1621269665364,"results":"85","hashOfConfig":"65"},{"size":6643,"mtime":1643130262664,"results":"86","hashOfConfig":"65"},{"size":2990,"mtime":1642874286840,"results":"87","hashOfConfig":"65"},{"size":7762,"mtime":1622897733834,"results":"88","hashOfConfig":"65"},{"size":6109,"mtime":1622195948821,"results":"89","hashOfConfig":"65"},{"size":3040,"mtime":1642785245749,"results":"90","hashOfConfig":"65"},{"size":8358,"mtime":1642786636188,"results":"91","hashOfConfig":"65"},{"size":4663,"mtime":1642439034102,"results":"92","hashOfConfig":"65"},{"size":827,"mtime":1622880851782,"results":"93","hashOfConfig":"65"},{"size":3631,"mtime":1642780910368,"results":"94","hashOfConfig":"65"},{"size":834,"mtime":1622880861717,"results":"95","hashOfConfig":"65"},{"size":1435,"mtime":1621621558908,"results":"96","hashOfConfig":"65"},{"size":5265,"mtime":1621444990145,"results":"97","hashOfConfig":"65"},{"size":151,"mtime":1622747340697,"results":"98","hashOfConfig":"65"},{"size":3192,"mtime":1622474740408,"results":"99","hashOfConfig":"65"},{"size":1346,"mtime":1621530905865,"results":"100","hashOfConfig":"65"},{"size":5832,"mtime":1621453300944,"results":"101","hashOfConfig":"65"},{"size":4374,"mtime":1623501493642,"results":"102","hashOfConfig":"65"},{"size":1220,"mtime":1621445365721,"results":"103","hashOfConfig":"65"},{"size":5545,"mtime":1642959155136,"results":"104","hashOfConfig":"65"},{"size":1709,"mtime":1621358477419,"results":"105","hashOfConfig":"65"},{"size":1582,"mtime":1624206481887,"results":"106","hashOfConfig":"65"},{"size":1684,"mtime":1623439140736,"results":"107","hashOfConfig":"65"},{"size":281,"mtime":1622740515932,"results":"108","hashOfConfig":"65"},{"size":384,"mtime":1616092333487,"results":"109","hashOfConfig":"65"},{"size":379,"mtime":1615724333681,"results":"110","hashOfConfig":"65"},{"size":2517,"mtime":1622390518783,"results":"111","hashOfConfig":"65"},{"size":2308,"mtime":1621367502069,"results":"112","hashOfConfig":"65"},{"size":888,"mtime":1624105225164,"results":"113","hashOfConfig":"65"},{"size":556,"mtime":1621531079104,"results":"114","hashOfConfig":"65"},{"size":339,"mtime":1621621569539,"results":"115","hashOfConfig":"65"},{"size":575,"mtime":1620925266906,"results":"116","hashOfConfig":"65"},{"size":1353,"mtime":1615828459911,"results":"117","hashOfConfig":"65"},{"size":3841,"mtime":1642787047378,"results":"118","hashOfConfig":"65"},{"size":4756,"mtime":1642787338239,"results":"119","hashOfConfig":"65"},{"size":749,"mtime":1616851231752,"results":"120","hashOfConfig":"65"},{"size":1482,"mtime":1642615816891,"results":"121","hashOfConfig":"65"},{"size":7893,"mtime":1623500595438,"results":"122","hashOfConfig":"65"},{"size":6950,"mtime":1642780596120,"results":"123","hashOfConfig":"65"},{"size":10543,"mtime":1648998424242,"results":"124","hashOfConfig":"65"},{"size":1257,"mtime":1624040295499,"results":"125","hashOfConfig":"65"},{"size":1340,"mtime":1642532708155,"results":"126","hashOfConfig":"65"},{"size":7114,"mtime":1643134296725,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"dfh0uo",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"130"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"130"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"130"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"130"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"130"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"130"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"130"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"130"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"130"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"130"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"130"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"130"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"130"},"/Users/onesmusnyakotyo/ocart/frontend/src/index.js",[],["269","270"],"/Users/onesmusnyakotyo/ocart/frontend/src/reportWebVitals.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/App.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/store.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/reducers/productReducers.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/reducers/orderReducers.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Footer.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/SearchButtons.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/FooterPrivacy.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Header.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/CartScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/PaymentScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProfileScreen.js",["271"],"import React, { useState, useEffect} from 'react'\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\n\n\n\nconst ProfileScreen = ({location, history}) => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { loading, error, user} = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo} = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector((state) => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n\n    useEffect(() => {\n        if(!userInfo) {\n            history.push('/login')\n        } else {\n            if(!user.name || success ){\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            } else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success ])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n       if(password !== confirmPassword){\n           setMessage('Password do not match')\n       } else {\n            dispatch(updateUserProfile({ id: user._id, name, email, password }))\n       }\n       \n    }\n\n\n    return (\n   <Row>\n       <Col md={3}>\n         <h2>User Profile</h2>\n        {message && <Message variant='danger'>{message}</Message>}\n        {error && <Message variant='danger'>{error}</Message>}\n         {success && <Message variant='success'>Profile Updated</Message>}\n        {/* {loading && <Loader />} */}\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control \n                    type='name' \n                    placeholder='Enter name' \n                    value={name} \n                    onChange={(e) => setName(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control \n                    type='email' \n                    placeholder='Enter email' \n                    value={email} \n                    onChange={(e) => setEmail(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId='password'>\n                <Form.Label>Password</Form.Label>\n                <Form.Control \n                    type='password' \n                    placeholder='Enter password' \n                    value={password} \n                    onChange={(e) => setPassword(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n             <Form.Group controlId='confirmPassword'>\n                <Form.Label>Confirm Password</Form.Label>\n                <Form.Control \n                    type='password' \n                    placeholder='Confirm password' \n                    value={confirmPassword} \n                    onChange={(e) => setConfirmPassword(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Update\n            </Button>\n        </Form>\n       </Col>\n       <Col md={9}>\n           <h2>My Orders</h2>\n           {loadingOrders ? (\n          <Loader />\n        ) : errorOrders ? (\n          <Message variant='danger'>{errorOrders}</Message>\n        ) : (\n          <Table striped bordered hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  {/* <td>{order.createdAt}</td> */}\n                  <td>${order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='success'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n       </Col>\n   </Row>\n    )\n}\n\nexport default ProfileScreen\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/HomeScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/NotFound.js",["272"],"import React from 'react'\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\"> Page not Found</h1>\n      <p>Sorry, this page does not exist</p>\n    </div>\n  )\n}\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingScreen.js",["273"],"import React, { useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { saveShippingAddress } from '../actions/cartActions'\n\n\nconst ShippingScreen = ({ history }) => {\n  \n  //const cart = useSelector((state) => state.cart)\n  //const { shippingAddress } = cart\n\n  // const [address, setAddress] = useState(shippingAddress.address)\n  // const [city, setCity] = useState(shippingAddress.city)\n  // const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n  // const [country, setCountry] = useState(shippingAddress.country)\n\n  const [address, setAddress] = useState('')\n  const [city, setCity] = useState('')\n  const [postalCode, setPostalCode] = useState('')\n  const [country, setCountry] = useState('')\n\n  const dispatch = useDispatch()\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    dispatch(saveShippingAddress({ address, city, postalCode, country }))\n    history.push('/payment')\n  }\n\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 />\n      <h1>Shipping</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId='address'>\n          <Form.Label>Address</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter address'\n            value={address}\n            required\n            onChange={(e) => setAddress(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='city'>\n          <Form.Label>City</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter city'\n            value={city}\n            required\n            onChange={(e) => setCity(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='postalCode'>\n          <Form.Label>Postal Code</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter postal code'\n            value={postalCode}\n            required\n            onChange={(e) => setPostalCode(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter country'\n            value={country}\n            required\n            onChange={(e) => setCountry(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type='submit' variant='primary'>\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  )\n}\n\nexport default ShippingScreen","/Users/onesmusnyakotyo/ocart/frontend/src/screens/LoginScreen.js",["274"],"import React, { useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { login } from '../actions/userActions'\nimport FormContainer from '../components/FormContainer'\nimport { CART_REMOVE_ALL_ITEMS }  from '../constants/cartConstants'\n\n\nconst LoginScreen = ({location, history}) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userLogin = useSelector(state => state.userLogin)\n\n\n    const { loading, error, userInfo} = userLogin\n\n    console.log('USER',userInfo)\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    useEffect(() => {\n        if(userInfo) {\n            history.push(redirect)\n            \n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        window.localStorage.clear(); //clear all localstorage\n        dispatch(login(email, password))\n        // dispatch({ type: CART_REMOVE_ALL_ITEMS })\n        \n    }\n\n\n    return (\n    <FormContainer>\n        <h1>Sign In</h1>\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control \n                    type='email' \n                    placeholder='Enter email' \n                    value={email} \n                    onChange={(e) => setEmail(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId='password'>\n                <Form.Label>Password</Form.Label>\n                <Form.Control \n                    type='password' \n                    placeholder='Enter password' \n                    value={password} \n                    onChange={(e) => setPassword(e.target.value)}>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary' className='mt-2'>\n                Sign In\n            </Button>\n        </Form>\n\n        <Row className='py-3'>\n            <Col>\n            New Customer? <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}> Register</Link>\n            </Col>\n        </Row>\n    </FormContainer>\n    ) \n}\n\nexport default LoginScreen\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/RegisterScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/UserListScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/UserEditScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductEditScreen.js",["275"],"\nimport axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\nimport _ from 'lodash'\n\n\nconst ProductEditScreen = ({ match, history, props }) => {\n  const productId = match.params.id\n\n  const [name, setName] = useState('')\n  const [price, setPrice] = useState(0)\n  const [images, setImages] = useState('')\n  const [brand, setBrand] = useState('')\n  const [category, setCategory] = useState('')\n  const [countInStock, setCountInStock] = useState(0)\n  const [description, setDescription] = useState('')\n  const [uploading, setUploading] = useState(false)\n\n  const dispatch = useDispatch()\n\n  const productDetails = useSelector((state) => state.productDetails)\n  const { loading, error, product } = productDetails\n\n  const productUpdate = useSelector((state) => state.productUpdate)\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = productUpdate\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET })\n      history.push('/admin/productlist')\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId))\n      } else {\n        setName(product.name)\n        setPrice(product.price)\n        //setImage(product.image)\n        setImages(product.images)\n        setBrand(product.brand)\n        setCategory(product.category)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n      }\n    }\n  }, [dispatch, history, productId, product, successUpdate])\n\n  const uploadFileHandler = async (e) => {\n    let { files } = e.target\n\n     //console.log('FORMDATA-FILES', files )\n    \n    const formData = new FormData()\n        for (let i = 0; i < files.length; i++) {\n            formData.append('images', files[i]) \n            // console.log('FILES', files[i])                     \n        }\n  \n        //props.getMultiple();\n\n  \n\n    // const file = e.target.files[0]\n    // const formData = new FormData()\n    // formData.append('image', file)\n\n      console.log('FORMDATA-FILES',  files)\n    \n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n\n      console.log('BEFORE AXIOS', formData )\n\n      const { data } = await axios.post('/api/upload',formData, config)\n\n     console.log('AXIOS-PHOTOS', data )\n\n      setImages(data)\n      setUploading(false)\n    } catch (error) {\n      console.error(error)\n      setUploading(false)\n    }\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        //image,\n        images,\n        brand,\n        category,\n        description,\n        countInStock,\n      })\n    )\n  }\n\n   //console.log('AXIOS-DATA',images )\n\n   \n\n  return (\n    <>\n      <Link to='/admin/productlist' className='btn btn-primary my-3'>\n        Go Back\n      </Link>\n      <FormContainer>\n        <h1>Edit Product</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type='name'\n                placeholder='Enter name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='price'>\n              <Form.Label>Price</Form.Label>\n              <Form.Control\n                type='number'\n                placeholder='Enter price'\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n           \n            <Form.Group controlId='image'>\n              <Form.Label>Image</Form.Label>\n              \n              <Form.Control\n                type='text'\n                placeholder='Enter image url'\n                value={images}\n                onChange={(e) => setImages(e.target.value)}\n              ></Form.Control>\n              \n              <Form.File\n                multiple\n                id='image-file'\n                //label='Choose Files'\n                custom\n                onChange={uploadFileHandler}\n              ></Form.File>\n              {uploading && <Loader />}\n            </Form.Group>\n          \n\n            <Form.Group controlId='brand'>\n              <Form.Label>Brand</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter brand'\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='countInStock'>\n              <Form.Label>Count In Stock</Form.Label>\n              <Form.Control\n                type='number'\n                placeholder='Enter countInStock'\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='category'>\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter category'\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='description'>\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter description'\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </>\n  )\n}\n\nexport default ProductEditScreen","/Users/onesmusnyakotyo/ocart/frontend/src/screens/OrderListScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellRegisterScreen.js",["276"],"import React, {useEffect, useState} from 'react'\nimport { useSelector } from 'react-redux'\nimport {Form, Button} from 'react-bootstrap'\n//import { LinkContainer } from 'react-router-bootstrap'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { useDispatch} from 'react-redux'\nimport { saveSellerRegister} from '../actions/userActions'\nimport { getUserDetails } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\n\nconst SellRegisterScreen = ({history}) => {\n\n \n  \n    const [firstName, setFirstname] = useState('')\n    const [middleName, setMiddlename] = useState('')\n    const [lastName, setLastname] = useState('')\n    const [email, setEmail] = useState('')\n    const [mobile, setMobile] = useState('')\n    const [companyName, setCompanyName] = useState('')\n    const [address, setAddress] = useState('')\n    const [town, setTown] = useState('')\n    const [country, setCountry] = useState('')\n    const [bankAccount, setBankAccount] = useState('')\n    const [chargeCard, setChargeCard] = useState('')\n    const [idNumber,  setIdNumber] = useState('')\n  \n\n    const dispatch = useDispatch()\n\n     const userDetails = useSelector(state => state.userDetails)\n    const { user} = userDetails\n\n    //console.log('USER-DETAILS', user)\n\n\n    const userLogin = useSelector(state => state.userLogin)\n\n    //console.log('USER-LOGIN', userLogin)\n\n\n    const { loading, error, userInfo} = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n\n\n\n    useEffect(() => {\n        if(!userInfo) {\n            history.push('/login')\n        } else {\n            if(!user.name || success ){\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n            } else{\n                setLastname(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success ])\n\n\n    const sellerRegister =  useSelector(state => state.sellerRegister)\n    const { success: sellerRegisterSuccess } = sellerRegister\n\n  \n\n      \n\n\n    const submitHandler = (e, sellerRegister, sellerConfirmation) => {\n    e.preventDefault()\n    if(!userInfo){\n        history.push('/login')\n    }else{\n        //dispatch({ type: USER_UPDATE_PROFILE_RESET })\n        //dispatch(getUserDetails('profile'))\n        dispatch(saveSellerRegister(\n       \n       sellerRegister =  { \n           user,\n           firstName, \n           middleName, \n           lastName, \n           companyName,\n           address, \n           town, \n           country,\n           mobile, \n           email, \n           idNumber,\n           bankAccount,\n           chargeCard\n            \n        },\n       \n\n        ))\n         if(sellerRegister.user) {\n            history.push('/sellerRegisterRequest')\n            } else {\n                 history.push('/')\n            }\n   \n    }\n    \n  }\n\n    return (\n        <>\n            <FormContainer>\n\n\n               {error && <Message variant='danger'>{error}</Message>}\n               {loading && <Loader />}\n                   \n                <h5 className='text-center py-3 m-3'>Seller Register Form</h5>\n                 \n                     \n\n                <Form  onSubmit={submitHandler}> \n                <Form.Group className='text-center'>\n                     \n                    <h5 className='text-center py-2'>Register to sell - Fill in Form below</h5>\n  \n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"First name\"  \n                        value={firstName}\n                        required\n                        onChange={(e) => setFirstname(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Middle name\" \n                        value={middleName}\n                        onChange={(e) => setMiddlename(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Last name\" \n                        value={lastName}\n                        required\n                        onChange={(e) => setLastname(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Company name\" \n                        value={companyName}\n                        required\n                        onChange={(e) => setCompanyName(e.target.value)}\n                        />\n                    <br />\n                    \n                     <Form.Control \n                        type=\"text\" \n                        placeholder=\"address\" \n                        value={address}\n                        required\n                        onChange={(e) => setAddress(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"City/Town\" \n                        value={town}\n                        required\n                        onChange={(e) => setTown(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"country\" \n                        value={country}\n                        required\n                        onChange={(e) => setCountry(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Mobile Number\" \n                        value={mobile}\n                        required\n                        onChange={(e) => setMobile(e.target.value)}\n                        />\n                    <br />\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Email Address\" \n                        value={email}\n                        required\n                        onChange={(e) => setEmail(e.target.value)}\n                        />\n                    <br />\n                     <Form.Control \n                        type=\"text\" \n                        placeholder=\"Emirates ID Number\" \n                        value={idNumber}\n                        required\n                        onChange={(e) => setIdNumber(e.target.value)}\n                        /> \n                    <br />\n                      <Form.Control \n                        type=\"text\" \n                        placeholder=\"Chargeable Bank Card\" \n                        value={chargeCard}\n                        required\n                        onChange={(e) => setChargeCard(e.target.value)}\n                        /> \n                    <br />\n                      <Form.Control \n                        type=\"text\" \n                        placeholder=\"Bank Account to send selling proceedings\" \n                        value={bankAccount}\n                        required\n                        onChange={(e) => setBankAccount(e.target.value)}\n                        /> \n                    <br />\n\n                     <Button type='submit' variant='primary'>\n                            Continue\n                    </Button>\n  \n                </Form.Group>\n                </Form>  \n            </FormContainer>\n            \n        </>\n    )\n}\n\nexport default SellRegisterScreen\n\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/PlaceOrderScreen.js",["277","278"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { getUserDetails } from '../actions/userActions'\n//import { ORDER_CREATE_RESET } from '../constants/orderConstants'\n//import { USER_DETAILS_RESET } from '../constants/userConstants'\n\n\nconst PlaceOrderScreen = ({history}) => {\n\n  const dispatch = useDispatch()\n\n  const userDetails = useSelector(state => state.userDetails)\n  const { user} = userDetails\n\n  const cart = useSelector((state) => state.cart)\n\n  console.log('CART', cart.cartItems)\n\n   //   Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  )\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\n\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2)\n\n   //cart.totalPrice = Number(cart.itemsPrice + cart.taxPrice).toFixed(2)\n   console.log('T-PRICE',cart.totalPrice)\n    \n  \n\n  const orderCreate =  useSelector(state => state.orderCreate)\n  const { order, success, error } = orderCreate\n\n   console.log('ORDER-CREATE',orderCreate)\n\n  useEffect(() => {\n      if(success) {\n          history.push(`/order/${order._id}`)\n        } \n        // eslint-disable-next-line\n    }, [history,success])\n\n  const placeOrderHandler = () => {\n    dispatch(createOrder({\n      \n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n    }))\n  }\n  \n\n    return (\n        <>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                    <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Address: </strong>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\n                {cart.shippingAddress.postalCode},{' '}\n                {cart.shippingAddress.country}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <strong>Method: </strong>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                            </ListGroup>\n                        )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                              <Button type='button' className='btn-block' disabled={cart.cartItems === 0 }\n                                onClick={placeOrderHandler}>Place Order</Button>\n\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default PlaceOrderScreen\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerOrderListScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/OrderScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductListScreen.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingLabels.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellingHow.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingReceiptDisplay.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/reducers/cartReducers.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerConfirmationScreen.js",["279","280"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {Form, Button} from 'react-bootstrap'\n//import { LinkContainer } from 'react-router-bootstrap'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { sellerConfirmationPost} from '../actions/userActions'\nimport { getUserDetails } from '../actions/userActions'\n//import { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\n\n\n\nconst SellerConfirmationScreen = ({ match, history }) => {\n\n    const userId = match.params.id\n\n    console.log('USERID', userId)\n\n    const [clientIdCheck, setClientIdCheck] = useState('Yes')\n    const [ bankAccountCheck, setBankAccountCheck] = useState('Yes')\n    const [chargeableCard,  setChargeableCard] = useState('Yes')\n\n    \n    const dispatch = useDispatch()\n\n     const userDetails = useSelector(state => state.userDetails)\n    const { success, user} = userDetails\n\n    //console.log('USER-DETAILS', user)\n\n     const userUpdate = useSelector((state) => state.userUpdate)\n        const {\n            loading: loadingUpdate,\n            error: errorUpdate,\n            success: successUpdate,\n        } = userUpdate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n\n    const {loading, error, userInfo} = userLogin\n\n    //console.log('USER-LOGIN', userLogin)\n\n\n   \n\n    useEffect(() => {\n        if(!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user.name || user._id !== userId) {\n                dispatch(getUserDetails(userId))\n            } else{\n               \n               \n            }\n        }\n    }, [dispatch, history, userInfo, user, success, userId ])\n\n\n    useEffect(() => {\n   if(!userInfo) {\n            history.push('/login')\n      \n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId))\n      } else {\n       \n        \n      }\n    }\n  }, [dispatch, history, userId, user, successUpdate, userInfo])\n\n     const submitHandler = (e, sellerConfirmation) => {\n          e.preventDefault()\n        if(window.confirm('By pressing continue - you will be signing off your name against this seller and you will be signed off as the authorisation officer. Are you sure, you have you filled in all the fields correctly?')) {\n            dispatch(sellerConfirmationPost(\n                    userId ,\n                sellerConfirmation = {\n                    email: userInfo.email,\n                    name: userInfo.name,\n                    chargeableCard: chargeableCard, \n                    clientIdCheck: clientIdCheck,\n                    bankAccountCheck: bankAccountCheck\n                }\n            ))\n            history.push('/admin/userlist')\n        }\n        \n     }\n\n\n    return (\n        <>\n             <FormContainer>\n\n\n                {error && <Message variant='danger'>{error}</Message>}\n               {loading && <Loader />} \n                   \n                <h5 className='text-center py-3 m-3'>Seller Confirmation Form</h5>\n                 \n                     \n\n                <Form  onSubmit={submitHandler}> \n                <Form.Group >\n\n                 \n                     \n                    <h5 className='text-center py-2'>Please fill in the form below accurately</h5>\n  \n\n                    <Form.Check\n                            type= 'radio'\n                            label='Client ID Checked'\n                            id='clientId'\n                            name='clientIdCheck'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setClientIdCheck(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    <Form.Check\n                            type= 'radio'\n                            label='Bank Account Checked'\n                            id='bankAccountCheck'\n                            name='bankAccountCheck'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setBankAccountCheck(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    <Form.Check\n                            type= 'radio'\n                            label='Chargeable Card Checked'\n                            id='chargeable Card'\n                            name='chargeableCard'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setChargeableCard(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    \n                        <Button type='submit' variant='dark' >\n                            Continue\n                        </Button>\n                   \n                     \n  \n                </Form.Group>\n                </Form>  \n            </FormContainer>\n            \n        </>\n    )\n}\n\nexport default SellerConfirmationScreen\n","/Users/onesmusnyakotyo/ocart/frontend/src/components/FooterTerms.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/StripeCheckout.js",["281"],"import React, {useState} from 'react'\nimport {  useStripe } from '@stripe/react-stripe-js'\nimport { useSelector } from 'react-redux'\nimport { fetchFromAPI }  from './StripeHelper'\nimport {Button, Form } from 'react-bootstrap'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport FormContainer from '../../components/FormContainer'\nimport CheckoutSteps from '../../components/CheckoutSteps'\n//import Stripe from 'stripe'\n//import { LinkContainer } from 'react-router-bootstrap'\n\n\nconst StripeCheckout = () => {\n\n  \n\n    const userLogin = useSelector(state => state.userLogin)\n\n    const { loading, error, userInfo } = userLogin\n\n\n   \n    const [email, setEmail] = useState('')\n\n       \n        const cart = useSelector((state) => state.cart)\n         const { cartItems } = cart\n\n         console.log('CART STRIPE', cartItems)\n\n        const stripe = useStripe()\n\n        const checkoutHandler  = async (e) => {\n            e.preventDefault();\n\n            const line_items = cartItems.map(item => {\n            return {\n                quantity: item.qty,\n                price_data: {\n                currency: 'usd',\n                unit_amount: item.price * 100, // amount is in cents\n                product_data: {\n                    name: item.name,\n                    description: item.description,\n                    images: [item.image]\n                    //images:  '/Users/onesmusnyakotyo/ocart/frontend/public/images/airpods.jpg'\n                    \n                },\n                \n                }\n            }\n            });\n\n\n            console.log('LINEITEMS', line_items )\n       \n\n        const response = await fetchFromAPI('create-checkout-session', {\n             body: { line_items, customer_email: email },\n            });\n\n            console.log('RESPONSE', response )\n\n\n        const { sessionId } = response;\n\n           console.log('SESSIONID', sessionId )\n\n        const { error } = await stripe.redirectToCheckout({\n             sessionId\n            });\n\n         if(error) {\n            console.log(error);\n            }\n\n\n         \n        }\n\n    return (\n        <>\n            <FormContainer>\n\n               <CheckoutSteps step1 step2 step3 step4 />\n\n               {error && <Message variant='danger'>{error}</Message>}\n               {loading && <Loader />}\n                   \n                <h4 className='text-center py-3 m-3'>Please Checkout Below</h4>\n                 \n                     \n\n                <Form  onSubmit={checkoutHandler}> \n                <Form.Group className='text-center'>\n  \n                    <Form.Control \n                        type=\"email\" \n                        placeholder=\"Email\"  \n                        value={email}\n                        required\n                        onChange={(e) => setEmail(e.target.value)}\n                        />\n                    <br />\n    \n                    <Button type='submit' variant='primary'>\n                            Checkout\n                    </Button>\n  \n                </Form.Group>\n                </Form>  \n            </FormContainer>\n            </>\n    )\n}\n\nexport default StripeCheckout\n\n\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/Cancelled.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/reducers/userReducers.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/Success.js",["282","283"],"import React, { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Card, CardGroup, Button  } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { createOrder, getOrderDetails, payOrder } from '../../actions/orderActions'\n//import { CART_REMOVE_ALL_ITEMS }  from '../../constants/cartConstants'\n//import { ORDER_CREATE_RESET } from '../constants/orderConstants'\n//import { USER_DETAILS_RESET } from '../constants/userConstants'\n\nconst Success = ({history, location}) => {\n\n   const dispatch = useDispatch()\n\n  const cart = useSelector((state) => state.cart)\n\n  console.log('CART', cart)\n\n   //   Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  )\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\n\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2)\n\n\n\n  // const orderDetails = useSelector((state) => state.orderDetails)\n  // const { order, loading, error } = orderDetails\n\n   const userLogin = useSelector((state) => state.userLogin)\n  const { userInfo } = userLogin\n\n  // const orderPay = useSelector((state) => state.orderPay)\n  // const { loading: loadingPay, success: successPay } = orderPay\n\n  // const orderDeliver = useSelector((state) => state.orderDeliver)\n  // const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n\n   useEffect(() => {\n    if (!userInfo ) {\n       history.push('/login')\n    } \n  }, [history, userInfo])\n  \n  useEffect(() => {\n\n    if(!userInfo ) {\n      //&& cart.cartItems && cart.cartItems === 0\n      history.push('/login')\n    } else {    \n\n      dispatch(createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        //paymentMethod: cart.paymentMethod,\n        paymentMethod: 'Stripe',\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n      }))\n\n      //dispatch({ type: CART_REMOVE_ALL_ITEMS })\n\n      // window.localStorage.removeItem( \"cartItems\") //remove one item   \n       //window.localStorage.removeItem(\"paymentMethod\") //remove one item  \n       //window.localStorage.removeItem( \"shippingAddress\") //remove one item   \n\n    }\n  }, [\n        history,\n        userInfo,\n        dispatch,\n        cart.cartItems,\n        cart.shippingAddress,\n        cart.paymentMethod,\n        cart.itemsPrice,\n        cart.shippingPrice,\n        cart.taxPrice,\n        cart.totalPrice\n  ])\n\n  //   const orderId = order._id\n\n  //   useEffect(() => {\n  //   if (!userInfo ) {\n  //      history.push('/login')\n  //   } else {\n  //     dispatch(getOrderDetails(orderId))\n  //     dispatch(payOrder(orderId))\n  //   }\n  // }, [history, userInfo, dispatch, orderId])\n      \n\n  \n\n    \n    \n  \n\n\n  \n\n \n    \n\n\n\n\n  return (\n    \n    <>\n    <CardGroup>\n                \n                <Card className=\"text-center\">\n                    <Card.Header as=\"h4\">Payment Successful</Card.Header>\n                \n                    <i className=\"fas fa-hand-holding-usd fa-lg py-3\" ></i>\n                    <Card.Body>\n                    <Card.Title>Thank you for your order</Card.Title>\n                    <Card.Text>\n                        We are currently processing your order and \n                        will send you a confirmation email shortly\n                    </Card.Text>\n                    <Card.Text>\n                       If you have any questions, please email {''}\n                          <a href=\"mailto:ocartorders@example.com\"><span style={{color: 'green'}}>ocartorders@example.com</span></a>\n                    </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                    <LinkContainer to='/'>\n                        <Button variant=\"primary\">Continue Shopping</Button>\n                    </LinkContainer>\n                    \n                    </Card.Footer>\n                </Card>\n            </CardGroup>\n        </>\n  );\n}\n\nexport default withRouter(Success);","/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerRegisterSuccess.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerProductListScreen.js",["284","285","286"],"import React, {useEffect} from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { listSellerProducts, deleteProduct, createProduct  } from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\nimport { getUserSellerDetails } from '../actions/userActions'\n\n\n\n\nconst SellerProductListScreen = ({ history, match }) => {\n\n\n\n    const dispatch = useDispatch()\n\n   const productCreate = useSelector((state) => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n     const productDelete = useSelector((state) => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete} = productDelete\n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo} = userLogin\n\n     const userDetails = useSelector(state => state.userDetailsSeller)\n    const { user} = userDetails\n\n    const productListSeller = useSelector((state) => state.productListSeller)\n    const { loading, error, sellerProducts} = productListSeller\n\n\n\n     console.log('USER-DETAILS-SELLER', productListSeller)\n\n    useEffect(() => {\n         dispatch({ type: PRODUCT_CREATE_RESET })\n\n        if(userInfo) {\n            if(!userInfo && !sellerProducts) {\n                //dispatch(listSellerProducts())\n                 history.push('/login')\n            } \n            \n             if(successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n                } else {\n                    dispatch(listSellerProducts())\n                }\n            \n        } \n\n    \n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct])\n\n    \n\n\n    const deleteHandler = (id) => {\n        if(window.confirm('Are you sure')) {\n            dispatch(deleteProduct(id))\n        }\n        \n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n\n    const addMultipleProductHandler = () => {\n        // dispatch(createProduct())\n         history.push('/productInsertExcel')\n    }\n\n\n    return (\n         <>\n         <Row className='align-items-center'>\n             <Col>\n                <h1>My Product List</h1>\n             </Col>\n             <Col className='text-right'>\n                 <Button className='my-2' onClick={createProductHandler}>\n                     <i className='fas fa-plus'></i> Add few Products\n                 </Button>\n\n             </Col>\n             <Col className='text-right'>\n                 <Button className='my-2' onClick={addMultipleProductHandler}>\n                     <i className='fas fa-plus'></i> Add Multiple Products\n                 </Button>\n\n             </Col>\n         </Row> \n\n         {loadingDelete && <Loader /> }\n         {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n        {loadingCreate && <Loader /> }\n         {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <>\n                <Table striped bordered hover responsive className='table-sm'>\n                <thead>\n                    <tr>\n                    <th>ID</th>\n                    <th>NAME</th>\n                    <th>PRICE</th>\n                    <th>CATEGORY</th>\n                    <th>BRAND</th>\n                    <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    { sellerProducts.length === 0 ? (\n                    \n                        <h5>No Listed seller Products</h5> )\n                            \n                        :\n                        ( \n                        sellerProducts.map((product) => (\n                        <tr key={product._id}>\n                            <td>{product.productId}</td>\n                            <td>{product.name}</td>\n                            <td>\n                            ${product.price}\n                            </td>\n                            <td>\n                                {product.category}\n                            </td>\n                            <td>{product.brand}</td>\n                             <td>\n                            <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                <Button variant='light' className='btn-sm'>\n                                <i className='fas fa-edit'></i>\n                                </Button>\n                            </LinkContainer>\n                            <Button\n                                variant='danger'\n                                className='btn-sm'\n                                onClick={() => deleteHandler(product._id)}\n                            >\n                                <i className='fas fa-trash'></i>\n                            </Button>\n                            </td>\n                        </tr>\n                        ))\n                        )\n                    }\n                    \n                </tbody>\n                </Table>\n                \n                </>\n            )}\n            </>\n    )\n}\n\nexport default SellerProductListScreen\n","/Users/onesmusnyakotyo/ocart/frontend/src/constants/productConstants.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Logo.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/constants/orderConstants.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Message.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/FormContainer.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Loader.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/CheckoutSteps.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/constants/userConstants.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/SearchBox.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/CheckoutScreen/StripeHelper.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/constants/cartConstants.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Meta.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Rating.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingLabelsPages.js",["287"],"\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getUserDetails} from '../actions/userActions'\nimport { getOrderDetails} from '../actions/orderActions'\nimport { withRouter } from 'react-router-dom';\nimport {Container, Row, Col, ListGroup} from 'react-bootstrap'\n\n\n\n\n\nclass ShippingLabelsPages extends React.PureComponent {\n\n  \n\n   componentDidMount() {\n\n      const { match: { params } } = this.props\n\n     console.log('PARAMS',params._id)\n       if (params._id) {\n        this.props.getOrderDetails(params._id)\n\n    }\n    \n    \n   }\n\n   \n\n  render() {\n\n    const  orderDetails  = this.props.orderDetails\n    const { order} = orderDetails\n    const userDetails  = this.props.userDetails\n    const { user} = userDetails\n\n     //console.log('ORDER', orderDetails)\n    console.log('USER-DETAILS', orderDetails)\n    \n    \n    return (\n      <Container className='text-center'>\n     \n      <Row  >\n        <Col  className='text-center'>\n          {/* <ListGroup variant='flush'> */}\n            <ListGroup.Item>\n              <h5 className='mt-5 mb-4' style={{color: '#18bc9c'}} >Order {order.orderId}</h5>\n              <h5 className='mb-4' style={{color: '#18bc9c'}}> Shipping Address</h5>\n\n              <hr />\n              <p style={{fontWeight: 'bold', fontSize: 18}}>\n                {/* <strong>Name: </strong>  */}\n                {order.user.name}\n              </p>\n              {/* <p>\n                <strong>Email: </strong>{' '}\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p> */}\n              \n                {/* <strong>Address:</strong> */}\n                <p>{order.shippingAddress.address}</p>\n                <p>{order.shippingAddress.city}</p>\n                <p>{order.shippingAddress.postalCode}</p>\n                <p>{order.shippingAddress.country}</p>\n             \n                \n              \n            </ListGroup.Item>\n           {/* </ListGroup> */}\n          </Col>\n        </Row>\n\n      \n      </Container>\n    )\n  }\n}\n\n\nShippingLabelsPages.propTypes = {\n  getUserDetails: PropTypes.func.isRequired,\n  orderDetails: PropTypes.object.isRequired,\n  userDetails: PropTypes.object.isRequired,\n\n};\n\nconst mapStateToProps = state => ({\n  orderDetails: state.orderDetails,\n  userDetails: state.userDetails,\n  \n})\n\nexport default connect(mapStateToProps, {getUserDetails, getOrderDetails})(withRouter(ShippingLabelsPages))\n\n\n\n\n\n\n// const ShippingLabelsPages = React.forwardRef((props, ref, match, history) => {\n\n//   console.log('history', ref)\n\n//   const userId = match.params.id\n\n  \n\n//   const dispatch = useDispatch()\n\n//    const userDetails = useSelector(state => state.userDetails)\n//   const { user} = userDetails\n\n//     const orderDetails = useSelector((state) => state.orderDetails)\n//   const { order, loading, error } = orderDetails\n\n//    const userLogin = useSelector(state => state.userLogin)\n\n//     const {userInfo} = userLogin\n\n\n//     useEffect(() => {\n//         if(!userInfo) {\n//             history.push('/login')\n//         } else {\n//             if (!user.name || user._id !== userId) {\n//                 dispatch(getUserDetails(userId))\n//             } else{\n               \n               \n//             }\n//         }\n//     }, [dispatch, history, userInfo, user, userId ])\n\n\n\n\n//     return (\n//       <Container>\n//         <table ref={ref}>\n//         <thead>\n//           <th>ID</th>\n//           <th>NAME</th>\n//           <th>EMAIL</th>\n//         </thead>\n//         <tbody>\n//           <tr>\n//             <td>{user._id}</td>\n//             <td>{user.name}</td>\n//             <td>{user.email}</td>\n//           </tr>\n//         </tbody>\n//       </table>\n//       </Container>\n//     )\n      \n//     }\n//     )\n\n//     export default ShippingLabelsPages\n\n\n","/Users/onesmusnyakotyo/ocart/frontend/src/screens/ShippingReceipt.js",["288","289"],"\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getUserDetails} from '../actions/userActions'\nimport { getOrderDetails} from '../actions/orderActions'\nimport { withRouter } from 'react-router-dom';\nimport {Container, Row, Col, ListGroup, Card, Image} from 'react-bootstrap'\n\n\n\n\n\nclass ShippingReceipt extends React.PureComponent {\n\n\n   componentDidMount() {\n\n      const { match: { params } } = this.props\n\n     console.log('PARAMS',params._id)\n       if (params._id) {\n        this.props.getOrderDetails(params._id)\n\n    }\n    \n    \n   }\n\n   \n\n  render() {\n\n    const  orderDetails  = this.props.orderDetails\n    const { order} = orderDetails\n    const userDetails  = this.props.userDetails\n    const { user} = userDetails\n\n     //console.log('ORDER', orderDetails)\n    console.log('USER-DETAILS', orderDetails)\n\n\n   //   Calculate prices\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2)\n    }\n\n   order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    )\n  \n    \n    \n    return (\n      <Container className='text-center'>\n     \n      <Row  >\n        <Col  md={6} className='text-center'>\n          {/* <ListGroup variant='flush'> */}\n            <ListGroup.Item>\n              <h4 style={{ flexWrap: \"wrap\", color: '#18bc9c'}} className='mt-3 text-center' >Order {order.orderId}</h4>\n              <h2 className='mb-2'> Shipping Address</h2>\n\n              <hr />\n              <p style={{fontWeight: 'bold', fontSize: 18}}>\n                {/* <strong>Name: </strong>  */}\n                {order.user.name}\n              </p>\n              {/* <p>\n                <strong>Email: </strong>{' '}\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p> */}\n              \n                {/* <strong>Address:</strong> */}\n                <p>{order.shippingAddress.address}</p>\n                <p>{order.shippingAddress.city}</p>\n                <p>{order.shippingAddress.postalCode}</p>\n                <p>{order.shippingAddress.country}</p>\n             \n                \n              \n            </ListGroup.Item>\n            {/* </ListGroup> */}\n          </Col>\n\n          <Col md={6}>\n          <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {order.paymentMethod}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n             \n                <ListGroup variant='flush'>\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col>\n                        \n                            {item.name}\n                         \n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              \n            </ListGroup.Item>\n          {/* </ListGroup> */}\n        </Col>\n        <Col md={12} className='mt-3'>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n            </ListGroup>\n             </Card>\n            </Col>\n        </Row>\n\n      \n      </Container>\n    )\n  }\n}\n\n\nShippingReceipt.propTypes = {\n  getUserDetails: PropTypes.func.isRequired,\n  orderDetails: PropTypes.object.isRequired,\n  userDetails: PropTypes.object.isRequired,\n\n};\n\nconst mapStateToProps = state => ({\n  orderDetails: state.orderDetails,\n  userDetails: state.userDetails,\n  \n})\n\nexport default connect(mapStateToProps, {getUserDetails, getOrderDetails})(withRouter(ShippingReceipt ))\n\n\n\n\n","/Users/onesmusnyakotyo/ocart/frontend/src/components/Paginate.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/actions/cartActions.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/actions/orderActions.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/actions/productActions.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/actions/userActions.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/ProductCarousel.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/components/Product.js",[],"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductInsertExcelScreen.js",["290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305"],"import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\nimport _ from 'lodash'\n//import xlsx from 'xlsx'\nimport XLSX from 'xlsx';\n\nconst ProductInsertExcelScreen = () => {\n\n    const [files, setFiles] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const productUpdate = useSelector((state) => state.productUpdate)\n\n    const {\n        loading: loadingUpdate,\n        error: errorUpdate,\n        success: successUpdate,\n    } = productUpdate\n\n\n    const uploadFileHandler = async (e) => {\n        \n     let { files } = e.target\n\n    //  //console.log('FORMDATA-FILES', files )\n    \n    // const formData = new FormData()\n    //     for (let i = 0; i < files.length; i++) {\n    //         formData.append('images', files[i]) \n    //         // console.log('FILES', files[i])                     \n    //     }\n\n    //if(e.target.files){\n\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data, {type: 'array'});\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const json = XLSX.utils.sheet_to_json(worksheet);\n            console.log('JSON DATA',json)\n\n            const jsonArray =[]\n\n           \n\n            //  json.map((jsn,index) => \n            //     (\n                  \n            //       (jsn && index === index) ?\n                \n            //        jsonArray.push(jsn.imageOne, jsn.imageTwo, jsn.imageThree, jsn.imageFour, jsn.imageFive) : null\n            //     )\n         \n            //    )\n\n              //  json.filter(jsn => jsn.includes('images')).map(filteredjsn => (\n\n              //      jsonArray.push(filteredjsn )\n\n              // ))\n\n              //  console.log('JSON-ARRAY', jsonArray )\n        }\n\n         reader.readAsArrayBuffer(files[0])\n\n               \n    \n  \n    //}\n\n        \n\n \n\n\n      \n    \n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n\n        console.log('JSON PRODUCT FILE', reader)\n      //const { data } = await axios.post('/api/upload',reader, config)\n\n     //console.log('AXIOS-PHOTOS', data )\n\n      //setFiles(data)\n      setUploading(false)\n    } catch (error) {\n      console.error(error)\n      setUploading(false)\n    }\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    // dispatch(\n    //   updateProduct({\n       \n    //   })\n    // )\n  }\n\n\n\n\n\n\n  return(\n    <>\n    \n        <Link to='/admin/productlist' className='btn btn-primary my-3'>\n        Go Back\n      </Link>\n      <Card>\n        <Card.Header  as=\"h4\" style={{textAlign: 'center'}}>Add Multiple Products</Card.Header>\n        <Card.Body style={{  alignSelf: 'center'}}>\n\n          {/* <FormContainer > */}\n           \n            {/* {loadingUpdate && <Loader />}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {loading ? (\n              <Loader />\n            ) : error ? (\n              <Message variant='danger'>{error}</Message>\n            ) : ( */}\n              <Form onSubmit={submitHandler}>\n                {/* <Form.Group controlId='name'>\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type='name'\n                    placeholder='Enter name'\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='price'>\n                  <Form.Label>Price</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter price'\n                    value={price}\n                    onChange={(e) => setPrice(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n              \n                <Form.Group controlId='file' style={{margin: 6}}>\n                  <Form.Label style={{color: '#18bc9c'}}>Only Excel File can be uploaded.</Form.Label>\n                  \n                  {/* <Form.Control\n                    type='file'\n                    placeholder='Upload file'\n                    value={files}\n                    onChange={(e) => setFiles(e.target.value)}\n                  ></Form.Control> */}\n                  \n                  <Form.File\n                    multiple\n                    id='excel-file'\n                    //label='Choose Files'\n                    custom\n                    onChange={uploadFileHandler}\n                  ></Form.File>\n                  {uploading && <Loader />}\n                </Form.Group>\n              \n    {/* \n                <Form.Group controlId='brand'>\n                  <Form.Label>Brand</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter brand'\n                    value={brand}\n                    onChange={(e) => setBrand(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                {/* <Form.Group controlId='countInStock'>\n                  <Form.Label>Count In Stock</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter countInStock'\n                    value={countInStock}\n                    onChange={(e) => setCountInStock(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='category'>\n                  <Form.Label>Category</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter category'\n                    value={category}\n                    onChange={(e) => setCategory(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='description'>\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                <Button type='submit' variant='primary' style={{marginTop: 6}}>\n                  Upload Products\n                </Button>\n              </Form>\n            {/* ) */}\n            {/* } */}\n          {/* </FormContainer> */}\n          </Card.Body>\n      </Card>\n    </>\n  ) \n\n};\n\nexport default ProductInsertExcelScreen;\n",{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","replacedBy":"309"},{"ruleId":"310","severity":1,"message":"311","line":24,"column":13,"nodeType":"312","messageId":"313","endLine":24,"endColumn":20},{"ruleId":"314","severity":1,"message":"315","line":3,"column":1,"nodeType":"316","endLine":10,"endColumn":2},{"ruleId":"310","severity":1,"message":"317","line":3,"column":23,"nodeType":"312","messageId":"313","endLine":3,"endColumn":34},{"ruleId":"310","severity":1,"message":"318","line":9,"column":10,"nodeType":"312","messageId":"313","endLine":9,"endColumn":31},{"ruleId":"310","severity":1,"message":"319","line":12,"column":8,"nodeType":"312","messageId":"313","endLine":12,"endColumn":9},{"ruleId":"310","severity":1,"message":"320","line":68,"column":22,"nodeType":"312","messageId":"313","endLine":68,"endColumn":43},{"ruleId":"310","severity":1,"message":"321","line":8,"column":10,"nodeType":"312","messageId":"313","endLine":8,"endColumn":24},{"ruleId":"310","severity":1,"message":"322","line":18,"column":11,"nodeType":"312","messageId":"313","endLine":18,"endColumn":15},{"ruleId":"310","severity":1,"message":"323","line":34,"column":22,"nodeType":"312","messageId":"313","endLine":34,"endColumn":35},{"ruleId":"310","severity":1,"message":"324","line":35,"column":20,"nodeType":"312","messageId":"313","endLine":35,"endColumn":31},{"ruleId":"310","severity":1,"message":"325","line":20,"column":29,"nodeType":"312","messageId":"313","endLine":20,"endColumn":37},{"ruleId":"310","severity":1,"message":"326","line":6,"column":23,"nodeType":"312","messageId":"313","endLine":6,"endColumn":38},{"ruleId":"310","severity":1,"message":"327","line":6,"column":40,"nodeType":"312","messageId":"313","endLine":6,"endColumn":48},{"ruleId":"310","severity":1,"message":"328","line":9,"column":10,"nodeType":"312","messageId":"313","endLine":9,"endColumn":30},{"ruleId":"310","severity":1,"message":"322","line":30,"column":13,"nodeType":"312","messageId":"313","endLine":30,"endColumn":17},{"ruleId":"329","severity":1,"message":"330","line":57,"column":8,"nodeType":"331","endLine":57,"endColumn":83,"suggestions":"332"},{"ruleId":"310","severity":1,"message":"322","line":38,"column":13,"nodeType":"312","messageId":"313","endLine":38,"endColumn":17},{"ruleId":"310","severity":1,"message":"333","line":8,"column":47,"nodeType":"312","messageId":"313","endLine":8,"endColumn":52},{"ruleId":"310","severity":1,"message":"322","line":37,"column":13,"nodeType":"312","messageId":"313","endLine":37,"endColumn":17},{"ruleId":"310","severity":1,"message":"334","line":1,"column":8,"nodeType":"312","messageId":"313","endLine":1,"endColumn":13},{"ruleId":"310","severity":1,"message":"335","line":2,"column":27,"nodeType":"312","messageId":"313","endLine":2,"endColumn":36},{"ruleId":"310","severity":1,"message":"336","line":5,"column":10,"nodeType":"312","messageId":"313","endLine":5,"endColumn":21},{"ruleId":"310","severity":1,"message":"337","line":6,"column":8,"nodeType":"312","messageId":"313","endLine":6,"endColumn":15},{"ruleId":"310","severity":1,"message":"338","line":8,"column":8,"nodeType":"312","messageId":"313","endLine":8,"endColumn":21},{"ruleId":"310","severity":1,"message":"339","line":9,"column":10,"nodeType":"312","messageId":"313","endLine":9,"endColumn":28},{"ruleId":"310","severity":1,"message":"340","line":9,"column":30,"nodeType":"312","messageId":"313","endLine":9,"endColumn":43},{"ruleId":"310","severity":1,"message":"341","line":10,"column":10,"nodeType":"312","messageId":"313","endLine":10,"endColumn":30},{"ruleId":"310","severity":1,"message":"319","line":11,"column":8,"nodeType":"312","messageId":"313","endLine":11,"endColumn":9},{"ruleId":"310","severity":1,"message":"342","line":17,"column":12,"nodeType":"312","messageId":"313","endLine":17,"endColumn":17},{"ruleId":"310","severity":1,"message":"343","line":17,"column":19,"nodeType":"312","messageId":"313","endLine":17,"endColumn":27},{"ruleId":"310","severity":1,"message":"323","line":23,"column":18,"nodeType":"312","messageId":"313","endLine":23,"endColumn":31},{"ruleId":"310","severity":1,"message":"324","line":24,"column":16,"nodeType":"312","messageId":"313","endLine":24,"endColumn":27},{"ruleId":"310","severity":1,"message":"344","line":25,"column":18,"nodeType":"312","messageId":"313","endLine":25,"endColumn":31},{"ruleId":"310","severity":1,"message":"345","line":53,"column":19,"nodeType":"312","messageId":"313","endLine":53,"endColumn":28},{"ruleId":"310","severity":1,"message":"346","line":93,"column":13,"nodeType":"312","messageId":"313","endLine":93,"endColumn":19},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useSelector' is defined but never used.","'CART_REMOVE_ALL_ITEMS' is defined but never used.","'_' is defined but never used.","'sellerRegisterSuccess' is assigned a value but never used.","'getUserDetails' is defined but never used.","'user' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","'errorUpdate' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'getOrderDetails' is defined but never used.","'payOrder' is defined but never used.","'getUserSellerDetails' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sellerProducts'. Either include it or remove the dependency array.","ArrayExpression",["349"],"'Image' is defined but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Message' is defined but never used.","'FormContainer' is defined but never used.","'listProductDetails' is defined but never used.","'updateProduct' is defined but never used.","'PRODUCT_UPDATE_RESET' is defined but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'successUpdate' is assigned a value but never used.","'jsonArray' is assigned a value but never used.","'config' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"350","fix":"351"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, sellerProducts]",{"range":"352","text":"353"},[1879,1954],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, sellerProducts]"]