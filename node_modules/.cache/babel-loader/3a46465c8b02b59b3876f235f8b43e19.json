{"ast":null,"code":"import _regeneratorRuntime from\"/Users/onesmusnyakotyo/ocart/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/onesmusnyakotyo/ocart/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/onesmusnyakotyo/ocart/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import axios from'axios';import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import{Form,Button,Card}from'react-bootstrap';import{useDispatch,useSelector}from'react-redux';import Message from'../components/Message';import Loader from'../components/Loader';import FormContainer from'../components/FormContainer';import{listProductDetails,updateProduct}from'../actions/productActions';import{PRODUCT_UPDATE_RESET}from'../constants/productConstants';import _ from'lodash';//import xlsx from 'xlsx'\nimport XLSX from'xlsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ProductInsertExcelScreen=function ProductInsertExcelScreen(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),files=_useState2[0],setFiles=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),uploading=_useState4[0],setUploading=_useState4[1];var productUpdate=useSelector(function(state){return state.productUpdate;});var loadingUpdate=productUpdate.loading,errorUpdate=productUpdate.error,successUpdate=productUpdate.success;var uploadFileHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var files,reader,config;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:files=e.target.files;//  //console.log('FORMDATA-FILES', files )\n// const formData = new FormData()\n//     for (let i = 0; i < files.length; i++) {\n//         formData.append('images', files[i]) \n//         // console.log('FILES', files[i])                     \n//     }\n//if(e.target.files){\nreader=new FileReader();reader.onload=function(e){var data=e.target.result;var workbook=XLSX.read(data,{type:'array'});var sheetName=workbook.SheetNames[0];var worksheet=workbook.Sheets[sheetName];var json=XLSX.utils.sheet_to_json(worksheet);console.log('JSON DATA',json);var jsonArray=[];//  json.map((jsn,index) => \n//     (\n//       (jsn && index === index) ?\n//        jsonArray.push(jsn.imageOne, jsn.imageTwo, jsn.imageThree, jsn.imageFour, jsn.imageFive) : null\n//     )\n//    )\n//  json.filter(jsn => jsn.includes('images')).map(filteredjsn => (\n//      jsonArray.push(filteredjsn )\n// ))\n//  console.log('JSON-ARRAY', jsonArray )\n};reader.readAsArrayBuffer(files[0]);//}\nsetUploading(true);try{config={headers:{'Content-Type':'multipart/form-data'}};console.log('JSON PRODUCT FILE',reader);//const { data } = await axios.post('/api/upload',reader, config)\n//console.log('AXIOS-PHOTOS', data )\n//setFiles(data)\nsetUploading(false);}catch(error){console.error(error);setUploading(false);}case 6:case\"end\":return _context.stop();}}},_callee);}));return function uploadFileHandler(_x){return _ref.apply(this,arguments);};}();var submitHandler=function submitHandler(e){e.preventDefault();// dispatch(\n//   updateProduct({\n//   })\n// )\n};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Link,{to:\"/admin/productlist\",className:\"btn btn-primary my-3\",children:\"Go Back\"}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{as:\"h4\",style:{textAlign:'center'},children:\"Add Multiple Products\"}),/*#__PURE__*/_jsx(Card.Body,{style:{alignSelf:'center'},children:/*#__PURE__*/_jsxs(Form,{onSubmit:submitHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"file\",style:{margin:6},children:[/*#__PURE__*/_jsx(Form.Label,{style:{color:'#18bc9c'},children:\"Only Excel File can be uploaded.\"}),/*#__PURE__*/_jsx(Form.File,{multiple:true,id:\"excel-file\"//label='Choose Files'\n,custom:true,onChange:uploadFileHandler}),uploading&&/*#__PURE__*/_jsx(Loader,{})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",style:{marginTop:6},children:\"Upload Products\"})]})})]})]});};export default ProductInsertExcelScreen;","map":{"version":3,"sources":["/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductInsertExcelScreen.js"],"names":["axios","React","useState","useEffect","Link","Form","Button","Card","useDispatch","useSelector","Message","Loader","FormContainer","listProductDetails","updateProduct","PRODUCT_UPDATE_RESET","_","XLSX","ProductInsertExcelScreen","files","setFiles","uploading","setUploading","productUpdate","state","loadingUpdate","loading","errorUpdate","error","successUpdate","success","uploadFileHandler","e","target","reader","FileReader","onload","data","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","console","log","jsonArray","readAsArrayBuffer","config","headers","submitHandler","preventDefault","textAlign","alignSelf","margin","color","marginTop"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\nimport _ from 'lodash'\n//import xlsx from 'xlsx'\nimport XLSX from 'xlsx';\n\nconst ProductInsertExcelScreen = () => {\n\n    const [files, setFiles] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const productUpdate = useSelector((state) => state.productUpdate)\n\n    const {\n        loading: loadingUpdate,\n        error: errorUpdate,\n        success: successUpdate,\n    } = productUpdate\n\n\n    const uploadFileHandler = async (e) => {\n        \n     let { files } = e.target\n\n    //  //console.log('FORMDATA-FILES', files )\n    \n    // const formData = new FormData()\n    //     for (let i = 0; i < files.length; i++) {\n    //         formData.append('images', files[i]) \n    //         // console.log('FILES', files[i])                     \n    //     }\n\n    //if(e.target.files){\n\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data, {type: 'array'});\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const json = XLSX.utils.sheet_to_json(worksheet);\n            console.log('JSON DATA',json)\n\n            const jsonArray =[]\n\n           \n\n            //  json.map((jsn,index) => \n            //     (\n                  \n            //       (jsn && index === index) ?\n                \n            //        jsonArray.push(jsn.imageOne, jsn.imageTwo, jsn.imageThree, jsn.imageFour, jsn.imageFive) : null\n            //     )\n         \n            //    )\n\n              //  json.filter(jsn => jsn.includes('images')).map(filteredjsn => (\n\n              //      jsonArray.push(filteredjsn )\n\n              // ))\n\n              //  console.log('JSON-ARRAY', jsonArray )\n        }\n\n         reader.readAsArrayBuffer(files[0])\n\n               \n    \n  \n    //}\n\n        \n\n \n\n\n      \n    \n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n\n        console.log('JSON PRODUCT FILE', reader)\n      //const { data } = await axios.post('/api/upload',reader, config)\n\n     //console.log('AXIOS-PHOTOS', data )\n\n      //setFiles(data)\n      setUploading(false)\n    } catch (error) {\n      console.error(error)\n      setUploading(false)\n    }\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    // dispatch(\n    //   updateProduct({\n       \n    //   })\n    // )\n  }\n\n\n\n\n\n\n  return(\n    <>\n    \n        <Link to='/admin/productlist' className='btn btn-primary my-3'>\n        Go Back\n      </Link>\n      <Card>\n        <Card.Header  as=\"h4\" style={{textAlign: 'center'}}>Add Multiple Products</Card.Header>\n        <Card.Body style={{  alignSelf: 'center'}}>\n\n          {/* <FormContainer > */}\n           \n            {/* {loadingUpdate && <Loader />}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {loading ? (\n              <Loader />\n            ) : error ? (\n              <Message variant='danger'>{error}</Message>\n            ) : ( */}\n              <Form onSubmit={submitHandler}>\n                {/* <Form.Group controlId='name'>\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type='name'\n                    placeholder='Enter name'\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='price'>\n                  <Form.Label>Price</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter price'\n                    value={price}\n                    onChange={(e) => setPrice(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n              \n                <Form.Group controlId='file' style={{margin: 6}}>\n                  <Form.Label style={{color: '#18bc9c'}}>Only Excel File can be uploaded.</Form.Label>\n                  \n                  {/* <Form.Control\n                    type='file'\n                    placeholder='Upload file'\n                    value={files}\n                    onChange={(e) => setFiles(e.target.value)}\n                  ></Form.Control> */}\n                  \n                  <Form.File\n                    multiple\n                    id='excel-file'\n                    //label='Choose Files'\n                    custom\n                    onChange={uploadFileHandler}\n                  ></Form.File>\n                  {uploading && <Loader />}\n                </Form.Group>\n              \n    {/* \n                <Form.Group controlId='brand'>\n                  <Form.Label>Brand</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter brand'\n                    value={brand}\n                    onChange={(e) => setBrand(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                {/* <Form.Group controlId='countInStock'>\n                  <Form.Label>Count In Stock</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter countInStock'\n                    value={countInStock}\n                    onChange={(e) => setCountInStock(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='category'>\n                  <Form.Label>Category</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter category'\n                    value={category}\n                    onChange={(e) => setCategory(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='description'>\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                <Button type='submit' variant='primary' style={{marginTop: 6}}>\n                  Upload Products\n                </Button>\n              </Form>\n            {/* ) */}\n            {/* } */}\n          {/* </FormContainer> */}\n          </Card.Body>\n      </Card>\n    </>\n  ) \n\n};\n\nexport default ProductInsertExcelScreen;\n"]},"metadata":{},"sourceType":"module"}