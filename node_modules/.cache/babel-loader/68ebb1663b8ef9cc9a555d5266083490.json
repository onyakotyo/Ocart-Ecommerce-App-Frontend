{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerConfirmationScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap'; //import { LinkContainer } from 'react-router-bootstrap'\n\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { sellerConfirmationPost } from '../actions/userActions';\nimport { getUserDetails } from '../actions/userActions'; //import { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SellerConfirmationScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const userId = match.params.id;\n  console.log('USERID', userId);\n  const [clientIdCheck, setClientIdCheck] = useState('Yes');\n  const [bankAccountCheck, setBankAccountCheck] = useState('Yes');\n  const [chargeableCard, setChargeableCard] = useState('Yes');\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    success,\n    user\n  } = userDetails; //console.log('USER-DETAILS', user)\n\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    loading,\n    error,\n    userInfo\n  } = userLogin; //console.log('USER-LOGIN', userLogin)\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n      } else {}\n    }\n  }, [dispatch, history, userInfo, user, success, userId]);\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n      } else {}\n    }\n  }, [dispatch, history, userId, user, successUpdate, userInfo]);\n\n  const submitHandler = (e, sellerConfirmation) => {\n    e.preventDefault();\n\n    if (window.confirm('By pressing continue - you will be signing off your name against this seller and you will be signed off as the authorisation officer. Are you sure, you have you filled in all the fields correctly?')) {\n      dispatch(sellerConfirmationPost(userId, sellerConfirmation = {\n        email: userInfo.email,\n        name: userInfo.name,\n        chargeableCard: chargeableCard,\n        clientIdCheck: clientIdCheck,\n        bankAccountCheck: bankAccountCheck\n      }));\n      history.push('/admin/userlist');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"text-center py-3 m-3\",\n        children: \"Seller Confirmation Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center py-2\",\n            children: \"Please fill in the form below accurately\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"radio\",\n            label: \"Client ID Checked\",\n            id: \"clientId\",\n            name: \"clientIdCheck\",\n            value: \"Yes\",\n            required: true //checked\n            ,\n            Change: e => setClientIdCheck(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"radio\",\n            label: \"Bank Account Checked\",\n            id: \"bankAccountCheck\",\n            name: \"bankAccountCheck\",\n            value: \"Yes\",\n            required: true //checked\n            ,\n            Change: e => setBankAccountCheck(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"radio\",\n            label: \"Chargeable Card Checked\",\n            id: \"chargeable Card\",\n            name: \"chargeableCard\",\n            value: \"Yes\",\n            required: true //checked\n            ,\n            Change: e => setChargeableCard(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"dark\",\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n};\n\n_s(SellerConfirmationScreen, \"hVfsAjlOwgO2BrKliDHpC9QSpP8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = SellerConfirmationScreen;\nexport default SellerConfirmationScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SellerConfirmationScreen\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/ocart/frontend/src/screens/SellerConfirmationScreen.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Form","Button","Message","Loader","FormContainer","sellerConfirmationPost","getUserDetails","SellerConfirmationScreen","match","history","userId","params","id","console","log","clientIdCheck","setClientIdCheck","bankAccountCheck","setBankAccountCheck","chargeableCard","setChargeableCard","dispatch","userDetails","state","success","user","userUpdate","loading","loadingUpdate","error","errorUpdate","successUpdate","userLogin","userInfo","push","name","_id","submitHandler","e","sellerConfirmation","preventDefault","window","confirm","email","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {Form, Button} from 'react-bootstrap'\n//import { LinkContainer } from 'react-router-bootstrap'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { sellerConfirmationPost} from '../actions/userActions'\nimport { getUserDetails } from '../actions/userActions'\n//import { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\n\n\n\nconst SellerConfirmationScreen = ({ match, history }) => {\n\n    const userId = match.params.id\n\n    console.log('USERID', userId)\n\n    const [clientIdCheck, setClientIdCheck] = useState('Yes')\n    const [ bankAccountCheck, setBankAccountCheck] = useState('Yes')\n    const [chargeableCard,  setChargeableCard] = useState('Yes')\n\n    \n    const dispatch = useDispatch()\n\n     const userDetails = useSelector(state => state.userDetails)\n    const { success, user} = userDetails\n\n    //console.log('USER-DETAILS', user)\n\n     const userUpdate = useSelector((state) => state.userUpdate)\n        const {\n            loading: loadingUpdate,\n            error: errorUpdate,\n            success: successUpdate,\n        } = userUpdate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n\n    const {loading, error, userInfo} = userLogin\n\n    //console.log('USER-LOGIN', userLogin)\n\n\n   \n\n    useEffect(() => {\n        if(!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user.name || user._id !== userId) {\n                dispatch(getUserDetails(userId))\n            } else{\n               \n               \n            }\n        }\n    }, [dispatch, history, userInfo, user, success, userId ])\n\n\n    useEffect(() => {\n   if(!userInfo) {\n            history.push('/login')\n      \n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId))\n      } else {\n       \n        \n      }\n    }\n  }, [dispatch, history, userId, user, successUpdate, userInfo])\n\n     const submitHandler = (e, sellerConfirmation) => {\n          e.preventDefault()\n        if(window.confirm('By pressing continue - you will be signing off your name against this seller and you will be signed off as the authorisation officer. Are you sure, you have you filled in all the fields correctly?')) {\n            dispatch(sellerConfirmationPost(\n                    userId ,\n                sellerConfirmation = {\n                    email: userInfo.email,\n                    name: userInfo.name,\n                    chargeableCard: chargeableCard, \n                    clientIdCheck: clientIdCheck,\n                    bankAccountCheck: bankAccountCheck\n                }\n            ))\n            history.push('/admin/userlist')\n        }\n        \n     }\n\n\n    return (\n        <>\n             <FormContainer>\n\n\n                {error && <Message variant='danger'>{error}</Message>}\n               {loading && <Loader />} \n                   \n                <h5 className='text-center py-3 m-3'>Seller Confirmation Form</h5>\n                 \n                     \n\n                <Form  onSubmit={submitHandler}> \n                <Form.Group >\n\n                 \n                     \n                    <h5 className='text-center py-2'>Please fill in the form below accurately</h5>\n  \n\n                    <Form.Check\n                            type= 'radio'\n                            label='Client ID Checked'\n                            id='clientId'\n                            name='clientIdCheck'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setClientIdCheck(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    <Form.Check\n                            type= 'radio'\n                            label='Bank Account Checked'\n                            id='bankAccountCheck'\n                            name='bankAccountCheck'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setBankAccountCheck(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    <Form.Check\n                            type= 'radio'\n                            label='Chargeable Card Checked'\n                            id='chargeable Card'\n                            name='chargeableCard'\n                            value='Yes'\n                            required\n                            //checked\n                            Change={(e) => setChargeableCard(e.target.value)}\n                        > \n                    </Form.Check>\n                    <br />\n                    \n                        <Button type='submit' variant='dark' >\n                            Continue\n                        </Button>\n                   \n                     \n  \n                </Form.Group>\n                </Form>  \n            </FormContainer>\n            \n        </>\n    )\n}\n\nexport default SellerConfirmationScreen\n"]},"metadata":{},"sourceType":"module"}