{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductInsertExcelScreen.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { listProductDetails, updateProduct } from '../actions/productActions';\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants';\nimport _ from 'lodash'; //import xlsx from 'xlsx'\n\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductInsertExcelScreen = () => {\n  _s();\n\n  const [files, setFiles] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n\n  const uploadFileHandler = async e => {\n    let {\n      files\n    } = e.target; //  //console.log('FORMDATA-FILES', files )\n    // const formData = new FormData()\n    //     for (let i = 0; i < files.length; i++) {\n    //         formData.append('images', files[i]) \n    //         // console.log('FILES', files[i])                     \n    //     }\n    //if(e.target.files){\n\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const data = e.target.result;\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const json = XLSX.utils.sheet_to_json(worksheet);\n      console.log('JSON DATA', json);\n      const jsonArray = [];\n      json.map((jsn, index) => jsn && index ? jsonArray.push(jsn.imageOne, jsn.imageTwo, jsn.imageThree, jsn.imageFour, jsn.imageFive) : null);\n      console.log('JSON-ARRAY', jsonArray);\n    };\n\n    reader.readAsArrayBuffer(files[0]); //}\n\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      console.log('JSON PRODUCT FILE', reader); //const { data } = await axios.post('/api/upload',reader, config)\n      //console.log('AXIOS-PHOTOS', data )\n      //setFiles(data)\n\n      setUploading(false);\n    } catch (error) {\n      console.error(error);\n      setUploading(false);\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault(); // dispatch(\n    //   updateProduct({\n    //   })\n    // )\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/productlist\",\n      className: \"btn btn-primary my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        as: \"h4\",\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Add Multiple Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        style: {\n          alignSelf: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"file\",\n            style: {\n              margin: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              style: {\n                color: '#18bc9c'\n              },\n              children: \"Only Excel File can be uploaded.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n              multiple: true,\n              id: \"excel-file\" //label='Choose Files'\n              ,\n              custom: true,\n              onChange: uploadFileHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            style: {\n              marginTop: 6\n            },\n            children: \"Upload Products\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductInsertExcelScreen, \"nrm9P06aqu5m6Gf7YL8UhS5ef6I=\", false, function () {\n  return [useSelector];\n});\n\n_c = ProductInsertExcelScreen;\nexport default ProductInsertExcelScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductInsertExcelScreen\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/ocart/frontend/src/screens/ProductInsertExcelScreen.js"],"names":["axios","React","useState","useEffect","Link","Form","Button","Card","useDispatch","useSelector","Message","Loader","FormContainer","listProductDetails","updateProduct","PRODUCT_UPDATE_RESET","_","XLSX","ProductInsertExcelScreen","files","setFiles","uploading","setUploading","productUpdate","state","loading","loadingUpdate","error","errorUpdate","success","successUpdate","uploadFileHandler","e","target","reader","FileReader","onload","data","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","console","log","jsonArray","map","jsn","index","push","imageOne","imageTwo","imageThree","imageFour","imageFive","readAsArrayBuffer","config","headers","submitHandler","preventDefault","textAlign","alignSelf","margin","color","marginTop"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\nimport _ from 'lodash'\n//import xlsx from 'xlsx'\nimport XLSX from 'xlsx';\n\nconst ProductInsertExcelScreen = () => {\n\n    const [files, setFiles] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const productUpdate = useSelector((state) => state.productUpdate)\n\n    const {\n        loading: loadingUpdate,\n        error: errorUpdate,\n        success: successUpdate,\n    } = productUpdate\n\n\n    const uploadFileHandler = async (e) => {\n        \n     let { files } = e.target\n\n    //  //console.log('FORMDATA-FILES', files )\n    \n    // const formData = new FormData()\n    //     for (let i = 0; i < files.length; i++) {\n    //         formData.append('images', files[i]) \n    //         // console.log('FILES', files[i])                     \n    //     }\n\n    //if(e.target.files){\n\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data, {type: 'array'});\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const json = XLSX.utils.sheet_to_json(worksheet);\n            console.log('JSON DATA',json)\n\n            const jsonArray =[]\n\n           \n\n             json.map((jsn,index) => \n                (\n                  \n                  (jsn && index) ?\n                \n                   jsonArray.push(jsn.imageOne, jsn.imageTwo, jsn.imageThree, jsn.imageFour, jsn.imageFive) : null\n                )\n         \n               )\n\n               console.log('JSON-ARRAY', jsonArray )\n        }\n\n         reader.readAsArrayBuffer(files[0])\n\n               \n    \n  \n    //}\n\n        \n\n \n\n\n      \n    \n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n\n        console.log('JSON PRODUCT FILE', reader)\n      //const { data } = await axios.post('/api/upload',reader, config)\n\n     //console.log('AXIOS-PHOTOS', data )\n\n      //setFiles(data)\n      setUploading(false)\n    } catch (error) {\n      console.error(error)\n      setUploading(false)\n    }\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    // dispatch(\n    //   updateProduct({\n       \n    //   })\n    // )\n  }\n\n\n\n\n\n\n  return(\n    <>\n    \n        <Link to='/admin/productlist' className='btn btn-primary my-3'>\n        Go Back\n      </Link>\n      <Card>\n        <Card.Header  as=\"h4\" style={{textAlign: 'center'}}>Add Multiple Products</Card.Header>\n        <Card.Body style={{  alignSelf: 'center'}}>\n\n          {/* <FormContainer > */}\n           \n            {/* {loadingUpdate && <Loader />}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {loading ? (\n              <Loader />\n            ) : error ? (\n              <Message variant='danger'>{error}</Message>\n            ) : ( */}\n              <Form onSubmit={submitHandler}>\n                {/* <Form.Group controlId='name'>\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type='name'\n                    placeholder='Enter name'\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='price'>\n                  <Form.Label>Price</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter price'\n                    value={price}\n                    onChange={(e) => setPrice(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n              \n                <Form.Group controlId='file' style={{margin: 6}}>\n                  <Form.Label style={{color: '#18bc9c'}}>Only Excel File can be uploaded.</Form.Label>\n                  \n                  {/* <Form.Control\n                    type='file'\n                    placeholder='Upload file'\n                    value={files}\n                    onChange={(e) => setFiles(e.target.value)}\n                  ></Form.Control> */}\n                  \n                  <Form.File\n                    multiple\n                    id='excel-file'\n                    //label='Choose Files'\n                    custom\n                    onChange={uploadFileHandler}\n                  ></Form.File>\n                  {uploading && <Loader />}\n                </Form.Group>\n              \n    {/* \n                <Form.Group controlId='brand'>\n                  <Form.Label>Brand</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter brand'\n                    value={brand}\n                    onChange={(e) => setBrand(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                {/* <Form.Group controlId='countInStock'>\n                  <Form.Label>Count In Stock</Form.Label>\n                  <Form.Control\n                    type='number'\n                    placeholder='Enter countInStock'\n                    value={countInStock}\n                    onChange={(e) => setCountInStock(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='category'>\n                  <Form.Label>Category</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter category'\n                    value={category}\n                    onChange={(e) => setCategory(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='description'>\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control\n                    type='text'\n                    placeholder='Enter description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Form.Control>\n                </Form.Group> */}\n\n                <Button type='submit' variant='primary' style={{marginTop: 6}}>\n                  Upload Products\n                </Button>\n              </Form>\n            {/* ) */}\n            {/* } */}\n          {/* </FormContainer> */}\n          </Card.Body>\n      </Card>\n    </>\n  ) \n\n};\n\nexport default ProductInsertExcelScreen;\n"]},"metadata":{},"sourceType":"module"}